<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>&lt;strong&gt;Research Track 1  -  Third Assignment&lt;/strong&gt;</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the third assignment of the &quot;Research Track I&quot; course. The aim of this project consists in creating a package in which the user will be free to use three different modalities for moving the robot that&apos;ll be better explained in the &quot;Description&quot; section:<itemizedlist>
<listitem><para><bold>autonomously reach a x,y coordinate inserted by the user</bold>;</para>
</listitem><listitem><para><bold>let the user drive with the keyboard</bold> ;</para>
</listitem><listitem><para><bold>let the user drive the robot assisting them to avoid collisions</bold>.</para>
</listitem></itemizedlist>
</para>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md0">
<title>&lt;strong&gt;How to run&lt;/strong&gt;</title>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md1">
<title>Installation</title>
<para>This project is based on the ROS Noetic enviroment, if you havent installed it yet, follow the instructions in this link <ulink url="http://wiki.ros.org/noetic/Installation/Ubuntu">noetic/Installation/Ubuntu - ROS Wiki</ulink>. Once you have installed ROS, you will need to clone this repository into the src/ folder of your workspace: <programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>https://www.github.com/PerriAlessandro/final_assignment</highlight></codeline>
</programlisting></para>
<para>You will also need to download <bold>xterm</bold>, the <bold>slam_gmapping</bold> package and the ROS navigation stack: <programlisting><codeline><highlight class="normal">sudo<sp/>apt<sp/>install<sp/>xterm</highlight></codeline>
<codeline><highlight class="normal">git<sp/>clone<sp/>https://www.github.com/CarmineD8/slam_gmapping</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>ros-noetic-navigation</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>Launch the simulator</title>
<para>To properly launch the project, you should run three different *.launch* files:<itemizedlist>
<listitem><para><bold>simulation_gmapping.launch</bold>, to launch the simulation;</para>
</listitem><listitem><para><bold>move_base.launch</bold>, to manage the movement of the robot;</para>
</listitem><listitem><para><bold>final_assignment.launch</bold>, to launch the three nodes I implemented for the UI and the three modalities.</para>
</listitem></itemizedlist>
</para>
<para>To avoid launching every time all those files, I created a .launch file to run them using only a command line, so you only need to run this: <programlisting><codeline><highlight class="normal">roslaunch<sp/>final_assignment<sp/>run.launch</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>&lt;strong&gt;Description&lt;/strong&gt;</title>
<para>As said in the intro, the aim of the assignment was creating some ROS nodes to properly manage three different modalities that let the robot move inside the map. To do that, I created three Python scripts:</para>
<para><itemizedlist>
<listitem><para><bold>user_interface.py</bold>,</para>
</listitem><listitem><para><bold>goal_reaching.py</bold></para>
</listitem><listitem><para><bold>teleop.py</bold></para>
</listitem></itemizedlist>
</para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md4">
<title>User Interface</title>
<para>The first one is the User Interface that lets the user switch between the modalities, including the &apos;idle&apos; one (i.e. when no mode is active). The command is given by a user keyboard input and it is sent to the other nodes using ROS topics. </para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>Autonomous Driving</title>
<para>The second script, as the name may suggest, implements the &apos;Autonomous Driving modality&apos;. The user will be asked to insert the &apos;x&apos; and &apos;y&apos; coordinates to which the robot will navigate. The whole task is accomplished by a <bold>ROS action</bold>. A 60 seconds timeout is set, so if the request cannot be accomplished the goal will be cancelled. The user can also cancel the goal before the time is over, it is sufficient to return to the &apos;idle&apos; status by pressing &apos;0&apos; on the UI console. </para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md6">
<title>Manual Driving</title>
<para>The third script implements both the <bold>Assisted</bold> and <bold>Not Assisted Driving</bold>. The script is essentially a revisitation of <bold>teleop_twist_keyboard</bold> because this one already lets the robot move using keyboard inputs, so the main part on which I worked was related to the Assisted Driving modality. In a nutshell, this last mode makes a subscription to _/scan_ topic in order to check if a certain direction is free or if there is an obstacle (e.g. a wall). Note that the robot can &apos;see&apos; through its lasers only within a +-90 relative degrees range, so it won&apos;t be able to avoid an obstacle if it is moving backward. The user can <bold>quit</bold> both the modalities by pressing <computeroutput>p</computeroutput> from the <bold>teleop console</bold>, or alternatively by pressing another command from <bold>UI console</bold>.</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md7">
<title>&lt;strong&gt;Pseudocodes&lt;/strong&gt;</title>
<para>Here you can find the pseudocodes for the three scripts:</para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md8">
<title>user_interface.py</title>
<para><programlisting><codeline><highlight class="normal">while<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>waiting<sp/>for<sp/>a<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>command<sp/>==<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>to<sp/>&apos;idle&apos;<sp/>modality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>elseif<sp/>command<sp/>==<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>to<sp/>&apos;autonomous<sp/>driving&apos;<sp/>modality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>elseif<sp/>command<sp/>==<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>to<sp/>&apos;manual<sp/>driving<sp/>(not<sp/>assisted)&apos;<sp/>modality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>elseif<sp/>command<sp/>==<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>to<sp/>&apos;manual<sp/>driving<sp/>(assisted)&apos;<sp/>modality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>elseif<sp/>command<sp/>==<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>quit<sp/>the<sp/>simulation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>key<sp/>pressed<sp/>is<sp/>wrong</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md9">
<title>goal_reaching.py</title>
<para><programlisting><codeline><highlight class="normal">while<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>autonomous<sp/>driving<sp/>mode<sp/>is<sp/>selected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>the<sp/>goal<sp/>has<sp/>not<sp/>been<sp/>set<sp/>yet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ask<sp/>the<sp/>user<sp/>to<sp/>insert<sp/>the<sp/>coordinates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>the<sp/>action</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>the<sp/>timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>time<sp/>has<sp/>expired</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cancel<sp/>the<sp/>goal<sp/>if<sp/>it&apos;s<sp/>still<sp/>pending</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md10">
<title>teleop.py</title>
<para><programlisting><codeline><highlight class="normal">while<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>not<sp/>assisted<sp/>manual<sp/>driving<sp/>mode<sp/>is<sp/>selected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>freely<sp/>command<sp/>the<sp/>robot<sp/>with<sp/>keyboard</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>elseif<sp/>assisted<sp/>manual<sp/>driving<sp/>mode<sp/>is<sp/>selected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>command<sp/>the<sp/>robot<sp/>with<sp/>keyboard<sp/>but<sp/>with<sp/>filtered<sp/>commands</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>quit<sp/>the<sp/>node<sp/>if<sp/>it&apos;s<sp/>still<sp/>running</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md11">
<title>&lt;strong&gt;Possible Improvements&lt;/strong&gt;</title>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
